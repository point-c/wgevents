{{- /*gotype:github.com/point-c/wgevents/internal/pkg/templates.Dot*/ -}}
// Code generated by events-generate; DO NOT EDIT.
package {{ .Package }}

import (
	"github.com/stretchr/testify/require"
	"testing"
	"bytes"
	"errors"
	"log/slog"
	{{ range .Imports }}"{{ . }}"
{{ end -}}
)

{{ define "requires" }}{{ if eq .Type "errorf" }}require.True(t, ev.IsErrorf()){{ else }}require.False(t, ev.IsErrorf()){{ end }}
require.Equal(t, {{ template "formatName.gotmpl" . }}, ev.Format())
var buf bytes.Buffer
ev.Slog(slog.New(slog.NewJSONHandler(&buf, &slog.HandlerOptions{Level: slog.LevelDebug})))
require.NotEmpty(t, buf.Bytes())
{{ end }}

{{ define "requires-rest" }}require.Equal(t, {{ template "niceName.gotmpl" . }}, ev.Nice())
require.Equal(t, {{ len .Args }}, len(ev.Args()))
{{ end }}

{{ define "testRunner" }}
t.Run("{{ . }}", func(t *testing.T) {
t.Parallel()
{{ end }}

func TestErrorfAny(t *testing.T) {
	ev := Events(func(ev Event) {
		require.IsType(t, &EventAny{}, ev)
		require.Equal(t, "", ev.Format())
		var buf bytes.Buffer
		ev.Slog(slog.New(slog.NewJSONHandler(&buf, &slog.HandlerOptions{Level: slog.LevelDebug})))
		require.NotEmpty(t, buf.Bytes())
		require.Equal(t, "", ev.Nice())
		require.Equal(t, 0, len(ev.Args()))
		require.True(t, ev.IsErrorf())
	})
	require.NotNil(t, ev)
	require.NotNil(t, ev.Errorf)
	ev.Errorf("")
}

func TestVerbosefAny(t *testing.T) {
	ev := Events(func(ev Event) {
		require.IsType(t, &EventAny{}, ev)
		require.Equal(t, "", ev.Format())
		var buf bytes.Buffer
		ev.Slog(slog.New(slog.NewJSONHandler(&buf, &slog.HandlerOptions{Level: slog.LevelDebug})))
		require.NotEmpty(t, buf.Bytes())
		require.Equal(t, "", ev.Nice())
		require.Equal(t, 0, len(ev.Args()))
		require.False(t, ev.IsErrorf())
	})
	require.NotNil(t, ev)
	require.NotNil(t, ev.Verbosef)
	ev.Verbosef("")
}

func TestEventTypes(t *testing.T) {
	{{ range .Events }}{{ $typeName := (print "Event" .Name) }}
	{{ template "testRunner" "type" }}
		{{ template "testRunner" $typeName }}
			var ev {{ $typeName }}
			{{ template "requires" . }}
			{{ template "requires-rest" . }}
		})
		{{ template "testRunner" "invalid args length" }}{{ $nils := joinStr (nilSlice (inc (len .Args))) }}
			ev := Events(func(ev Event) {
				require.IsType(t, &EventAny{}, ev)
				{{ template "requires" . }}
				require.Equal(t, fmt.Sprintf(restring({{ template "formatName.gotmpl" . }}), {{ $nils }}), ev.Nice())
				require.Equal(t, {{ inc (len .Args) }}, len(ev.Args()))
			})
			require.NotNil(t, ev)
			require.NotNil(t, ev.{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }})
			ev.{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}({{ template "formatName.gotmpl" . }}, {{ $nils }})
		})
		{{ if eq (len .Args) 0 }}
			{{ template "testRunner" "valid (no args)" }}
				ev := Events(func(ev Event) {
					require.IsType(t, &{{ $typeName }}{}, ev)
					{{ template "requires" . }}
					{{ template "requires-rest" . }}
				})
				require.NotNil(t, ev)
				require.NotNil(t, ev.{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }})
				ev.{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}("{{ .Format }}")
			})
		{{ else }}{{ $event := . }}
				{{ template "testRunner" (printf "valid (0 args), invalid (%d args)" (len .Args)) }}
					{{ $nils := joinStr (nilSlice (len $event.Args)) }}
					ev := Events(func(ev Event) {
						require.IsType(t, &EventAny{}, ev)
						{{ template "requires" $event }}
						require.Equal(t, fmt.Sprintf( restring( {{ template "formatName.gotmpl" $event }} ), {{ $nils }}), ev.Nice())
						require.Equal(t, {{ len $event.Args }}, len(ev.Args()))
					})
					require.NotNil(t, ev)
					require.NotNil(t, ev.{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }})
					ev.{{ if eq $event.Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}({{ template "formatName.gotmpl" $event }}, {{ $nils }})
				})
			{{ range $i, $e := .Args }}
				{{ $valids := add $i 1 }}
				{{ $invalids := add (mul -1 $valids) (len $event.Args) }}
				{{ $validsStr := joinStr (consSlice (slice $event.Args 0 (add $i 1))) }}
				{{ $invalidsStr := joinStr (nilSlice $invalids) }}
				{{ template "testRunner" (printf "valid (%d args), invalid (%d args)" $valids $invalids) }}
					ev := Events(func(ev Event) {
						{{ if eq $invalids 0 }}
							require.IsType(t, &{{ $typeName }}{}, ev)
							require.Equal(t, {{ template "niceName.gotmpl" $event }} , ev.Nice())
						{{ else }}
							require.IsType(t, &EventAny{}, ev)
							require.Equal(t, fmt.Sprintf( restring( {{ template "formatName.gotmpl" $event }} ), {{ $validsStr }}, {{ $invalidsStr }} ), ev.Nice())
						{{ end }}
						{{ template "requires" $event }}
						require.Equal(t, {{ len $event.Args }}, len(ev.Args()))
					})
					{{ if eq $invalids 0 }}
						ev.{{ if eq $event.Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}({{ template "formatName.gotmpl" $event }}, {{ $validsStr }} )
					{{ else }}
						ev.{{ if eq $event.Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}({{ template "formatName.gotmpl" $event }}, {{ $validsStr }}, {{ $invalidsStr }} )
					{{ end }}
				})
			{{ end }}
		{{ end }}
	})
{{ end -}} }

func restring(s string) string {return ""+s}

type testStringer struct {}
func (testStringer) String()string{return ""}