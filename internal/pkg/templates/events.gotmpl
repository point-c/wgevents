{{- /*gotype:github.com/point-c/wgevents/internal/events-generate.Dot*/ -}}
// Code generated by events-generate; DO NOT EDIT.
package {{ .Package }}

import (
    {{ range .Imports }}"{{ . }}"
    "log/slog"
{{ end -}}
)

var parser parsers

type parsers interface {
{{ range .Custom }}Parse{{ .Name }}(*Event{{ .Name }}, string, ...any) bool
{{ end -}}
}

const (
	{{ range .Events }}Format{{ if eq .Type "errorf" }}Errorf{{ else }}Verbosef{{ end }}{{ .Name }} = "{{.Format}}"
	{{ end -}}
)

// Errorf formats. Used to verify uniqueness.
{{ template "uniqueFormatMap.gotmpl" .Errorf }}

// Verbosef formats. Used to verify uniqueness.
{{ template "uniqueFormatMap.gotmpl" .Verbosef }}

// Event is a generic event emitted from the logger. Use a `switch v := v.(type) {` to filter values and gain access to arguments.
type Event interface {
	Nice() string
	Format() string
	Args() []any
    Slog(*slog.Logger)
	IsErrorf() bool
}

{{ range .Events }}
    {{ template "eventType.gotmpl" . }}
{{ end }}

// EventAny is an unrecognized event emitted from the logger.
type EventAny struct {
    format string
    args []any
    error bool
}

// Format returns the format strings passed to the logger.
func (e *EventAny) Format() string {return e.format}
// Args returns the args passed to the logger.
func (e *EventAny) Args() []any {return e.args}
// Nice returns the result of foramtting [EventAny.Format] with [EventAny.Args].
func (e *EventAny) Nice() string {return fmt.Sprintf(e.Format(), e.Args()...)}
// IsErrorf returns if this was logged with the errorf method.
func (e *EventAny) IsErrorf() bool {return e.error}
// Slog prints this event to a [slog.Logger].
func (e *EventAny) Slog(l *slog.Logger) {
    if e.error {
        l.Error(e.Nice())
    } else {
        l.Debug(e.Nice())
    }
}

// Events creates a new logger that can recognize the names and types of arguments passed to logging methods.
// fn is called for each event logged. Since Event is an interface there is an underlying type for each known event.
// If the event is unknown [EventAny] is used.
func Events(fn func(Event)) *device.Logger {
    return &device.Logger{
        Verbosef: func(format string, args ...any) {
            {{ template "logfn.gotmpl" isError .Verbosef false }}
        },
        Errorf:   func(format string, args ...any) {
            {{ template "logfn.gotmpl" isError .Errorf true }}
        },
    }
}